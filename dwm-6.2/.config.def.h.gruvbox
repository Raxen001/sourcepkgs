/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 4;        /* border pixel of windows */
static const int gappx     = 5;                 /* gaps between windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayspacing = 2;   /* systray spacing */
static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
static const int showsystray        = 1;     /* 0 means no systray */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 0;        /* 0 means bottom bar */

static const char *fonts[]          = {"Symbols Nerd Font:pixelsize=20:antialias=true:autohint:true"};
static const char dmenufont[]       = "Hack:size=13";
static const char col_gray1[]       = "#282828";
static const char col_gray2[]       = "#444444";
static const char col_gray3[]       = "#2E3039";
static const char col_gray4[]       = "#eeeeee";
static const char col_cyan[]        = "#4e94e2";
static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { col_gray3, col_gray3, "#2E3440"},
	[SchemeSel]  = { col_gray4, col_cyan,  "#458588"},
	[SchemeStatus]  = { col_gray2,  col_cyan,  "#000000"  }, // Statusbar right {text,background,not used but cannot be empty}
	[SchemeTagsSel]  = { "#D79921", "#2E3440",  "#000000"  }, // Tagbar left selected {text,background,not used but cannot be empty}
    [SchemeTagsNorm]  = { "#EBDBB2", col_gray1,  "#000000"  }, // Tagbar left unselected {text,background,not used but cannot be empty}
    [SchemeInfoSel]  = { "#E8C4A0", col_gray2,  "#000000"  }, // infobar middle  selected {text,background,not used but cannot be empty}
    [SchemeInfoNorm]  = { "#E8C4A0", col_gray2,  "#000000"  }, // infobar middle  unselected {text,background,not used but cannot be empty}
};
#include <X11/XF86keysym.h>
/* tagging */
static const char *tags[]    = { "", "", "", "", "", "", "", "ﭮ", "" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating    monitor   float x,y,w,h    floatborderpx  scratch*/
    { "Gimp",     NULL,        NULL,       0,                  1,        -1,   50,50,500,500,         0,         0,         },
    { "Spotify",  NULL,        NULL,       1 << 8,             0,        -1,   50,50,500,500,         0,         0,         }, 
    { "Steam",    NULL,        NULL,       1 << 0,             0,        -1,   50,50,500,500,         0,         0,         },
    { "Nemo",     NULL,        NULL,       1 << 3,             0,        -1,   50,50,500,500,         0,         0,         }, 
    { "zoom",      NULL,       NULL,       1 << 0,             1,        -1,   50,50,500,500,         0,         0,         },
    { "Atom",     NULL,        NULL,       1 << 2,             0,        -1,   50,50,500,500,         0,         0,         },
    { "vlc",      NULL,        NULL,       1 << 4,             0,        -1,   50,50,500,500,         0,         0,         },
    { "bashtop",   NULL,       NULL,       1 << 5,             0,        -1,   50,50,500,500,         0,         0,         },
    { "qBittorrent", NULL,     NULL,       1 << 5,             0,        -1,   50,50,500,500,         0,         0,         },
    { "firefox",  NULL,        NULL,       1 << 6,             0,        -1,   50,50,500,500,         0,         0,         },
    { "discord",  NULL,        NULL,       1 << 7,             0,        -1,   50,50,500,500,         0,         0,         },
    { NULL,       NULL,        "cmus",     0,                  1,        -1,   300,200,1200,700,      4,         'c',       },
    { NULL,       NULL,        "dict",     0,                  1,        -1,   300,200,1200,800,      3,         'd',       },
    { NULL,       NULL,        "term",     0,                  1,        -1,   516,230,900,700,       4,         't',       },
    { NULL,       NULL,        "ranger",   0,                  1,        -1,   380,100,1200,900,      3,         'r',       },
    { NULL,       NULL,        "youtube",  0,                  1,        -1,   516,230,1100,800,       4,        'y',        },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "F",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
	{ NULL,       NULL },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
/*static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };*/

static const char *dmenucmd[] = { "dmenu_run", NULL};
static const char *termcmd[]  = { "st", NULL };
/*static const char *termcmd[]  = { "alacritty", NULL };*/

/*First arg only serves to match against key in rules*/
static const char *term[]      = { "t", "st", "-t", "term", NULL };
static const char *youtube[]   = { "y", "st", "-t", "youtube", "-e", "ytfzf","--today", "-tS", NULL };
static const char *ytfzf[]     = { "ytfzf", "-D", NULL};
static const char *cmus[]      = { "c", "alacritty", "-t", "cmus", "-e", "cmus", NULL };
static const char *ranger[]    = { "r", "st", "-t", "ranger", "-e", "nnn", NULL};
static const char *dict[]      = { "d", "st", "-t", "dict", "-e", "sdcv", NULL };
 
static const char *neomutt[]   = { "st", "-e", "neomutt", NULL };

static const char *c_play[]    = { "playerctl", "play-pause", NULL };
static const char *c_pause[]   = { "playerctl", "pause", NULL};
static const char *c_next[]    = { "playerctl", "next", NULL };
static const char *c_prev[]    = { "playerctl", "previous", NULL };

static const char *screenshot[]= { "shotgun", NULL    };
static const char *slock[]     = { "slock", NULL};
static const char *suspend[]   = { "systemctl","suspend", NULL};
static const char *search[]    = { "bash", "/home/raxen/.local/configs/scripts/dmenu_websearch", NULL       };
static const char *search_o[]  = { "bash", "/home/raxen/.local/configs/scripts/dmenu_websearch", "-o", NULL };
static const char *bookmark[]  = { "bash", "/home/raxen/.local/configs/scripts/bookmarks_dmenu.sh", NULL };
static const char *shut[]      = { "bash", "/home/raxen/.local/configs/scripts/dmscripts.sh", NULL };

static const char *python[]    = {"st", "-e", "python", "-q", NULL};
static const char *redyt[]     = { "redyt",       NULL};
static const char *notes[]     = { "/home/raxen/.local/configs/scripts/note.sh", NULL};
static const char *notes_s[]   = { "/home/raxen/.local/configs/scripts/note.sh", "-s", NULL};

static const char *firefox[]     = { "firefox" , NULL};
static const char *firefox_p[]   = { "firefox", "--private-window", NULL};
static const char *discord[]     = { "discord"    , NULL};
static const char *qbittorrent[] = { "qbittorrent", NULL};
static const char *vlc[]         = { "vlc"        , NULL};
static const char *cal[]         = { "bash", "/home/raxen/.local/configs/scripts/calendar", NULL};
static const char *atom[]        = { "atom"   , NULL    };
static const char *clock[]       = { "st", "-e", "tty-clock", "-xsct", "-C", "4", NULL};
static const char *spotify[]     = { "spotify",  NULL };
static const char *nemo[]        = { "nemo",     NULL };
static const char *nvim[]        = { "st","-e", "nvim",     NULL };

static const char *upvol[]          = { "amixer","-c", "1", "sset", "Master", "1%+",NULL  };
static const char *downvol[]        = { "amixer","-c", "1", "sset", "Master", "1%-",NULL  };
static const char *mutevol[]        = { "amixer", "set", "Master", "toggle",  NULL};
static const char *brightup[]       = { "brightnessctl", "set","5%+", NULL  };
static const char *brightdown[]     = { "brightnessctl", "set","5%-", NULL  };


static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_u,      incnmaster,     {.i = -1 } },
	{ MODKEY|ShiftMask,       XK_h,                  setmfact,      {.f = -0.05       }},
	{ MODKEY|ShiftMask,       XK_l,                  setmfact,      {.f = +0.05       }},
	{ MODKEY|ShiftMask,             XK_j,      setcfact,       {.f = +0.25} },
	{ MODKEY|ShiftMask,             XK_k,      setcfact,       {.f = -0.25} },
	{ MODKEY|ShiftMask,             XK_o,      setcfact,       {.f =  0.00} },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY|ControlMask,		XK_comma,  cyclelayout,    {.i = -1 } },
	{ MODKEY|ControlMask,           XK_period, cyclelayout,    {.i = +1 } },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	{ MODKEY,                       XK_minus,  setgaps,        {.i = -5 } },
	{ MODKEY,                       XK_equal,  setgaps,        {.i = +5 } },
	{ MODKEY|ShiftMask,             XK_equal,  setgaps,        {.i = 0  } },
	{ MODKEY|ControlMask,           XK_j,      pushdown,       {0} },
	{ MODKEY|ControlMask,           XK_k,      pushup,         {0} },
    { MODKEY|ShiftMask,       XK_t,                  spawn,         {.v = nvim        }},
    { MODKEY,                 XK_e,                  spawn,         {.v = notes       }},
    { MODKEY|ShiftMask,       XK_e,                  spawn,         {.v = notes_s     }},
    { MODKEY|ShiftMask,       XK_p,                  spawn,         {.v = python      }},
    { MODKEY,                 XK_y,                  spawn,         {.v = ytfzf       }},
    { MODKEY|ShiftMask,       XK_r,                  spawn,         {.v = redyt       }},
    { MODKEY,                 XK_n,                  spawn,         {.v = neomutt     }}, 
    { MODKEY,                 XK_w,                  spawn,         {.v = firefox     }},
    { MODKEY,                 XK_o,                  spawn,         {.v = search      }},
    { MODKEY|ControlMask,     XK_o,                  spawn,         {.v = search_o    }},
    { MODKEY|ShiftMask,       XK_o,                  spawn,         {.v = bookmark    }},
    { MODKEY|ShiftMask,       XK_w,                  spawn,         {.v = firefox_p   }},
    { 0,                      XF86XK_AudioPlay,      spawn,         {.v = c_play      }},
    { 0,                      XF86XK_AudioStop,      spawn,         {.v = c_pause     }},
    { 0,                      XF86XK_AudioNext,      spawn,         {.v = c_next      }},
    { 0,                      XF86XK_AudioPrev,      spawn,         {.v = c_prev      }},
    { 0,                      XK_Print,              spawn,         {.v = screenshot  }},
    { 0,                 XF86XK_AudioRaiseVolume,    spawn,         {.v = upvol       }},
    { 0,                 XF86XK_AudioLowerVolume,    spawn,         {.v = downvol     }},
    { 0,                 XF86XK_AudioMute,           spawn,         {.v = mutevol     }},
    { 0,                 XF86XK_MonBrightnessUp,     spawn,         {.v = brightup    }},
    { 0,                 XF86XK_MonBrightnessDown,   spawn,         {.v = brightdown  }},
    { 0,                 XF86XK_Calculator,          spawn,         {.v = suspend     }},
    { 0,                      XK_KP_Next,            spawn,         {.v = atom        }},
    { 0,                      XK_KP_Left,            spawn,         {.v = nemo        }},
    { 0,                      XK_KP_Begin,           spawn,         {.v = vlc         }},
    { 0,                      XK_KP_Right,           spawn,         {.v = qbittorrent }},
    { 0,                      XK_KP_Up,              spawn,         {.v = discord     }},
    { 0,                      XK_KP_Prior,           spawn,         {.v = spotify     }},
    { 0,                      XK_KP_End,             spawn,         {.v = clock       }}, 
    { 0,                      XK_KP_Home,            spawn,         {.v = firefox     }}, 
    { 0,                      XK_KP_Down,            spawn,         {.v = cal         }}, 
    { 0,                 XK_KP_Insert,           togglescratch,     {.v = cmus        }}, 
    { MODKEY,                 XK_r,              togglescratch,     {.v = ranger      }}, 
    { MODKEY|ShiftMask,       XK_y,              togglescratch,     {.v = youtube     }},
    { MODKEY|ShiftMask|ControlMask,              XK_Return,         togglescratch,     {.v = term        }}, 
    { MODKEY,                 XK_a,              togglescratch,     {.v = dict        }}, 
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
    { MODKEY|ControlMask|ShiftMask, XK_l,            spawn,         {.v = slock       }},
	{ MODKEY,                XK_Escape,             spawn,           {.v = shut       }},
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

